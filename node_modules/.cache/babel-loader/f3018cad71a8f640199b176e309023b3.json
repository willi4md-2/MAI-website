{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName } from '@mui/utils';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function withThemeCreator() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultTheme\n  } = options;\n\n  const withTheme = Component => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (Component === undefined) {\n        throw new Error(['You are calling withTheme(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n      }\n    }\n\n    const WithTheme = /*#__PURE__*/React.forwardRef(function WithTheme(props, ref) {\n      const theme = useTheme() || defaultTheme;\n      return /*#__PURE__*/_jsx(Component, _extends({\n        theme: theme,\n        ref: ref\n      }, props));\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      WithTheme.displayName = `WithTheme(${getDisplayName(Component)})`;\n    }\n\n    hoistNonReactStatics(WithTheme, Component);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Exposed for test purposes.\n      WithTheme.Naked = Component;\n    }\n\n    return WithTheme;\n  };\n\n  return withTheme;\n} // Provide the theme object as a prop to the input component.\n// It's an alternative API to useTheme().\n// We encourage the usage of useTheme() where possible.\n\nconst withTheme = withThemeCreator();\nexport default withTheme;","map":null,"metadata":{},"sourceType":"module"}